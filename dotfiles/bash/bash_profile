#!/usr/bin/env bash

# Bash-Variables
# https://www.gnu.org/software/bash/manual/html_node/Bash-Variables.html
# The-Shopt-Builtin
# https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html#The-Shopt-Builtin

# Load the shell dotfiles, and then some:
# * ~/.path can be used to extend `$PATH`.
# * ~/.extra can be used for other settings you don’t want to commit.

for filename in ~/.{exports,aliases,functions,functions-fzf,bash_prompt,bash_logout}; do
  [ -r "$filename" ] && [ -f "$filename" ] && source "$filename"
done

unset filename
#
# ─── GENERAL OPTIONS ──────────────────────────────────────────────────────────
#

# Prevent file overwrite on stdout redirection
# Use `>|` to force redirection to an existing file
set -o noclobber

# update window size after every command
shopt -s checkwinsize

# Turn on recursive globbing (enables ** to recurse all directories)
shopt -s globstar

# Case-insensitive globbing (used in pathname expansion)
shopt -s nocaseglob

#
# ─── BETTER DIRECTORY NAVIGATION ─────────────────────────────────────────────
#

# activate and define cdable variables
shopt -s cdable_vars

# Prepend cd to directory names automatically
shopt -s autocd

# Correct spelling errors during tab-completion
shopt -s dirspell

# Correct spelling errors in arguments supplied to cd
shopt -s cdspell

# fix directory name typos whilst completing
shopt -s direxpand

#
# ─── HISTORY ─────────────────────────────────────────────────────────────────
#

# load history substitutions in the readline buffer
shopt -s histverify

# Append to the history file, don't overwrite it
shopt -s histappend

# save multi-line commands as one command
shopt -s cmdhist
# save multi-line commands with newlines rather with semicolon separators
shopt -s lithist

# the file to which the command history is saved
export HISTFILE="$HOME/.bash_history"

# Omit duplicates and commands that begin with a space from history.
# export HISTCONTROL='ignoredups:erasedups'
export HISTCONTROL='erasedups:ignoreboth'

# Increase Bash history size. Allow 32³ entries; the default is 500.
export HISTSIZE='500000'
export HISTFILESIZE='100000'

# Don't record some commands
# export HISTIGNORE="&:[ ]*:exit:ls:bg:fg:history:clear"

# Use standard ISO 8601 timestamp
# %F equivalent to %Y-%m-%d
# %T equivalent to %H:%M:%S (24-hours format)
# export HISTTIMEFORMAT='%F %T '
export HISTTIMEFORMAT="%d/%m/%y %T "

# Record each line of history right away
# instead of at the end of the session
# export PROMPT_COMMAND='history -a'
export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"

# Automatically trim long paths in the prompt (requires Bash 4.x)
export PROMPT_DIRTRIM=4


# export BASH_COMPLETION_USER_FILE="~/.bash-completion"


# need <C-d> twice to quit
# export IGNOREEOF=1

# ─────────────────────────────────────────────────────────────────────────────

# Add tab completion for many Bash commands
if command -v brew &>/dev/null && [ -r "$BREW_PREFIX/etc/profile.d/bash_completion.sh" ]; then
	# Ensure existing Homebrew v1 completions continue to work
	export BASH_COMPLETION_COMPAT_DIR="$BREW_PREFIX/etc/bash_completion.d"
	source "$BREW_PREFIX/etc/profile.d/bash_completion.sh"
elif [ -f /etc/bash_completion ]; then
	source /etc/bash_completion
fi

if command -v brew &>/dev/null; then
  for COMPLETION in "$BREW_PREFIX/etc/bash_completion.d/*"; do
    [[ -f $COMPLETION ]] && source "$COMPLETION"
  done
  if [[ -f "${BREW_PREFIX}/etc/profile.d/bash_completion.sh" ]]; then
    source "${BREW_PREFIX}/etc/profile.d/bash_completion.sh"
  fi
fi


# In ~/.bashrc or ~/.zshrc place the following lines:
BASE16_SHELL=$HOME/.config/base16-shell/
[ -n "$PS1" ] && [ -s $BASE16_SHELL/profile_helper.sh ] && eval "$($BASE16_SHELL/profile_helper.sh)"

# bashhub
# [ -f ~/.bashhub/bashhub.sh ] && . ~/.bashhub/bashhub.sh

# if [ `command -v gcloud` ]; then
#   source '/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.bash.inc'
#   source '/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.bash.inc'
# fi

# ─── FZF ─────────────────────────────────────────────────────────────────────
#

# key bindings
[ -f "/usr/local/opt/fzf/shell/key-bindings.bash" ] && . "/usr/local/opt/fzf/shell/key-bindings.bash"


# remove go package
goclean() {
  if [ $# -eq 0 ]; then
    echo "Usage: goclean go/package/path"
    return
  fi
  local pkg=$1; shift || return 1
  local ost
  local cnt

  # Clean removes object files from package source directories (ignore error)
  go clean -i $pkg &>/dev/null

  # Set local variables
  if [[ "$(uname -m)" == "x86_64" ]]; then
    ost="$(uname)"
    ost="$(echo $ost | tr '[:upper:]' '[:lower:]')_amd64"
    cnt="${pkg//[^\/]}"
  fi

  # Delete the source directory and compiled package directory(ies)
  [ -f "${GOPATH%%:*}/bin/${pkg##*/}" ] && rm -rf "${GOPATH%%:*}/bin/${pkg##*/}"

  if (("${#cnt}" == "2")); then
    [ -d "${GOPATH%%:*}/src/$pkg" ] && rm -rf "${GOPATH%%:*}/src/$pkg"
    [ -f "${GOPATH%%:*}/pkg/$ost/$pkg"* ] && rm -rf "${GOPATH%%:*}/pkg/$ost/$pkg"*
    [ -d "${GOPATH%%:*}/pkg/mod/$pkg"* ] && rm -rf "${GOPATH%%:*}/pkg/mod/$pkg"*
  elif (("${#cnt}" > "2")); then
    [ -d "${GOPATH%%:*}/src/${pkg%/*/*}" ] && rm -rf "${GOPATH%%:*}/src/${pkg%/*/*}"
    [ -d "${GOPATH%%:*}/pkg/${ost}/${pkg%/*/*}" ] && rm -rf "${GOPATH%%:*}/pkg/${ost}/${pkg%/*/*}"
    [ -d "${GOPATH%%:*}/pkg/mod/${pkg%/*/*}"* ] && rm -rf "${GOPATH%%:*}/pkg/mod/${pkg%/*/*}"*
  fi

  # Reload the current shell
  #  source ~/.bashrc
}


# Interactive cd
cdd() {
  if [[ "$#" != 0 ]]; then
    builtin cd "$@";
    return
  fi
  while true; do
    local lsd=$(echo ".." && ls -p | grep '/$' | sed 's;/$;;')
    local dir="$(printf '%s\n' "${lsd[@]}" |
      fzf --reverse --preview '
        __cd_nxt="$(echo {})";
        __cd_path="$(echo $(pwd)/${__cd_nxt} | sed "s;//;/;")";
        echo $__cd_path;
        echo;
        ls -p -FG "${__cd_path}";
    ')"
    [[ ${#dir} != 0 ]] || return 0
    builtin cd "$dir" &> /dev/null
  done
}
