;
; ─── GENERAL ────────────────────────────────────────────────────────────────────
; https://git-scm.com/docs/git-config#Documentation/git-config
; http://showthedocs.com/
;
; vim: ft=gitconfig

[core]
  excludesfile      = ~/.config/git/ignore
  attributesfile    = ~/.config/git/attributes
  ; hooksPath       = ~/.config/git/hooks
  editor            = $EDITOR
	autocrlf          = input
  commitGraph       = true
	whitespace        = trailing-space,space-before-tab
	safecrlf          = warn

[credential]
{%@@ if os == "linux-gnu" @@%}
  helper            = cache
{%@@ elif os == "darwin" @@%}
  helper            = osxkeychain
{%@@ endif @@%}


[branch]
  autosetupmerge    = always
  autosetuprebase   = always

[branch "master"]
  rebase            = true

[init]
	templatedir       = ~/.config/git/templates

[pull]
  rebase            = true

[push]
	default           = simple
	followTags        = true

[fetch]
  prune             = true

[rebase]
  autosquash        = true
  instructionFormat = [%cn <%ce> %G?] %s
  autoStash         = true

[submodule]
	fetchJobs         = 4

# [log]
#   decorate          = short
#   date              = local

[status]
	short             = true
	branch            = true
  submodulesummary  = true

[help]
	autocorrect       = 1

[grep]
	extendedRegexp    = true
	lineNumber        = true

[pager]
	diff              = diff-so-fancy | less --tabs=2 -RFX --pattern '^(Date|added|deleted|modified): '
	log               = delta --dark --plus-color="#012800" --minus-color="#340001" --theme="base16-onedark"
	show              = delta --dark --theme="base16-tomorrow-night"

; https://github.com/so-fancy/diff-so-fancy/issues/296
[interactive]
	diffFilter        = diff-so-fancy --patch-mode | less --tabs=2 -RFX



;
; ─── PRETTY FORMATS ─────────────────────────────────────────────────────────────
;

[pretty]
	default           = %C(auto)%h -%d %s %Cgreen(%cr) %C(bold blue)<%an>%Creset
	onelinecolor      = %Cred%h%Creset %an: %s - %Creset %C(yellow)%d%Creset %Cgreen(%cr)%Creset

;
; ─── ALIASES ────────────────────────────────────────────────────────────────────
;

[alias]
  a       = add
  amend   = commit --amend --reuse-message=HEAD  # Amend the currently staged files to the latest commit
  b       = branch
  br      = branch -a
  c       = commit
  cl      = clone --recursive

  co      = checkout
  cp      = cherry-pick

  d       = diff
  dfb     = diff-blame
  dsf     = "!f() { [ -z \"$GIT_PREFIX\" ] || cd \"$GIT_PREFIX\" && git diff --color \"$@\" | diff-so-fancy  | less --tabs=2 -RFX; }; f"
  dm      = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"  # Remove branches that have already been merged with master, a.k.a. ‘delete merged’

  count   = shortlog -sn
  last    = log -1 HEAD
  log --graph --pretty=format:'%C(bold red)%h%Creset -%C(bold magenta)%d%Creset %s %C(bold green)(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit -10
  lgg     = log --graph --abbrev-commit --pretty=default -5

  mk      = checkout -b
  mt      = mergetool

  p       = push
  pF      = push --force
  pall    = "!fn() { git pull && git submodule foreach git pull origin master; }; fn"   # Pull in remote changes for the current repository and all its submodules
  pm      = "!fn() { git pull origin $(git rev-parse --abbrev-ref HEAD); }; fn"         # pull origin's current branch into local

  rb      = rebase
  rba     = rebase --abort
  rbc     = rebase --continue
  rbi     = rebase -i
  rbs     = rebase --skip

  ra      = remote add
  rr      = remote remove
  rv      = remote -v

  st      = status

	changed  = show --pretty=\"format:\" --name-only
	commend  = commit --amend --no-edit
	; please = push --force-with-lease

	patch    = --no-pager diff --no-color
	; add-upstream = !zsh -ic \\\"add-upstream $*\\\"
	; add-remote = !zsh -ic \\\"add-remote $*\\\"
  undo     = "!fn() { git reset --hard $(git rev-parse --abbrev-ref HEAD)@{${1-1}}; }; fn"  # http://postd.cc/git-undo

;
; ─── COLORS ──────────────────────────────────────────────────────────────────
;

# # Nova
# # https://github.com/trevordmiller/nova-git
# [color]
#   pager        = true
#   ui           = auto
#   status       = auto
#   diff         = auto
#   branch       = auto
#   showBranch   = auto
#   interactive  = auto
#   grep         = auto
# [color "status"]
#   header       = black bold
#   branch       = cyan
#   nobranch     = red
#   unmerged     = red
#   untracked    = cyan
#   added        = green
#   changed      = red bold
# [color "diff"]
#   meta         = red bold
#   frag         = black bold
#   func         = blue
#   old          = red strike
#   new          = green
#   commit       = blue
#   whitespace   = red
#   context      = normal
# [color "branch"]
#   current      = cyan
#   local        = blue
#   remote       = magenta
#   upstream     = magenta
#   plain        = normal
# [color "decorate"]
#   branch       = blue
#   remoteBranch = magenta
#   tag          = magenta
#   stash        = cyan
#   HEAD         = blue
# [color "interactive"]
#   prompt       = red
#   header       = red bold
#   error        = red
#   help         = black bold
# [color "grep"]
#   context      = normal
#   match        = cyan
#   filename     = blue
#   function     = blue
#   selected     = normal
#   separator    = red bold
#   linenumber   = normal


# [include]
#   path                  = ~/.config/git/nova-color.config
  ; path                = ~/.config/git/tomorrow-night-eighties.config

;
; ─── DIFF & MERGE ─────────────────────────────────────────────────────────────
;

[diff]
  renames               = copies
  algorithm             = histogram
	tool                  = vimdiff
	indentHeuristic       = true
	# compactionHeuristic = true

[difftool]
	prompt                = false
	trustExitCode         = true

[diff "json"]
	textconv              = python -m json.tool

[diff "word"]
	textconv              = docx2txt

[diff "exif"]
  textconv              = exiftool

[diff "plist"]
  textconv              = plutil -convert xml1 -o -

[difftool "vimdiff"]
  cmd                   = $EDITOR -d $LOCAL $REMOTE

[merge]
  # Include summaries of merged commits in newly created merge commit messages
  log                   = 1000
  tool                  = vimdiff
  conflictstyle         = diff3

[mergetool]
  trustExitCode         = true
  keepBackup            = false
  prompt                = false

[mergetool "vimdiff"]
  cmd                   = $EDITOR -d $LOCAL $BASE $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'


;
; ─── GPG ──────────────────────────────────────────────────────────────────────
;

; [commit]
;   gpgsign = true

; [gpg]
; 	program = /usr/local/bin/gpg

;
; ─── LOCAL SETTINGS ───────────────────────────────────────────────────────────
;

[include]
	path = ~/.gitconfig.local
